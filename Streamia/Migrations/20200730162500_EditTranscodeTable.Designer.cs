// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Streamia.Models.Contexts;

namespace Streamia.Migrations
{
    [DbContext(typeof(StreamiaContext))]
    [Migration("20200730162500_EditTranscodeTable")]
    partial class EditTranscodeTable
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Streamia.Models.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ProfilePicture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Streamia.Models.Bouquet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Bouquets");
                });

            modelBuilder.Entity("Streamia.Models.BouquetMovie", b =>
                {
                    b.Property<int>("BouquetId")
                        .HasColumnType("int");

                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.HasKey("BouquetId", "MovieId");

                    b.HasIndex("MovieId");

                    b.ToTable("BouquetMovies");
                });

            modelBuilder.Entity("Streamia.Models.BouquetSeries", b =>
                {
                    b.Property<int>("BouquetId")
                        .HasColumnType("int");

                    b.Property<int>("SeriesId")
                        .HasColumnType("int");

                    b.HasKey("BouquetId", "SeriesId");

                    b.HasIndex("SeriesId");

                    b.ToTable("BouquetSeries");
                });

            modelBuilder.Entity("Streamia.Models.BouquetStream", b =>
                {
                    b.Property<int>("BouquetId")
                        .HasColumnType("int");

                    b.Property<int>("StreamId")
                        .HasColumnType("int");

                    b.HasKey("BouquetId", "StreamId");

                    b.HasIndex("StreamId");

                    b.ToTable("BouquetStreams");
                });

            modelBuilder.Entity("Streamia.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategoryType")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryType = 1,
                            Name = "Action"
                        },
                        new
                        {
                            Id = 12775,
                            CategoryType = 1,
                            Name = "Adventure"
                        },
                        new
                        {
                            Id = 8142,
                            CategoryType = 1,
                            Name = "Comedy"
                        },
                        new
                        {
                            Id = 4117,
                            CategoryType = 1,
                            Name = "Crime"
                        },
                        new
                        {
                            Id = 1608,
                            CategoryType = 1,
                            Name = "Drama"
                        },
                        new
                        {
                            Id = 7872,
                            CategoryType = 1,
                            Name = "Fantasy"
                        },
                        new
                        {
                            Id = 3305,
                            CategoryType = 1,
                            Name = "Historical"
                        },
                        new
                        {
                            Id = 311,
                            CategoryType = 1,
                            Name = "Horror"
                        },
                        new
                        {
                            Id = 4661,
                            CategoryType = 1,
                            Name = "Mystery"
                        },
                        new
                        {
                            Id = 446,
                            CategoryType = 1,
                            Name = "philosophical"
                        },
                        new
                        {
                            Id = 5492,
                            CategoryType = 1,
                            Name = "political"
                        },
                        new
                        {
                            Id = 9139,
                            CategoryType = 1,
                            Name = "Romance"
                        },
                        new
                        {
                            Id = 3084,
                            CategoryType = 1,
                            Name = "saga"
                        },
                        new
                        {
                            Id = 798,
                            CategoryType = 1,
                            Name = "Thriller"
                        },
                        new
                        {
                            Id = 575,
                            CategoryType = 1,
                            Name = "Western"
                        },
                        new
                        {
                            Id = 6811,
                            CategoryType = 1,
                            Name = "Crime Thriller"
                        },
                        new
                        {
                            Id = 2269,
                            CategoryType = 1,
                            Name = "Disaster Thriller"
                        },
                        new
                        {
                            Id = 2706,
                            CategoryType = 1,
                            Name = "Psychological Thriller"
                        },
                        new
                        {
                            Id = 8891,
                            CategoryType = 1,
                            Name = "Techno Thriller"
                        },
                        new
                        {
                            Id = 7959,
                            CategoryType = 1,
                            Name = "Science Fiction"
                        },
                        new
                        {
                            Id = 2742,
                            CategoryType = 1,
                            Name = "Suspense"
                        },
                        new
                        {
                            Id = 1297,
                            CategoryType = 1,
                            Name = "Animation"
                        },
                        new
                        {
                            Id = 3325,
                            CategoryType = 2,
                            Name = "Drama"
                        },
                        new
                        {
                            Id = 427,
                            CategoryType = 2,
                            Name = "Action"
                        },
                        new
                        {
                            Id = 8767,
                            CategoryType = 2,
                            Name = "Comedy"
                        },
                        new
                        {
                            Id = 30,
                            CategoryType = 2,
                            Name = "Adventure"
                        },
                        new
                        {
                            Id = 1333,
                            CategoryType = 2,
                            Name = "Crime"
                        },
                        new
                        {
                            Id = 679,
                            CategoryType = 2,
                            Name = "Fantasy"
                        },
                        new
                        {
                            Id = 190,
                            CategoryType = 2,
                            Name = "Science Fiction"
                        },
                        new
                        {
                            Id = 7011,
                            CategoryType = 2,
                            Name = "Suspense"
                        },
                        new
                        {
                            Id = 5909,
                            CategoryType = 2,
                            Name = "Thriller"
                        },
                        new
                        {
                            Id = 1820,
                            CategoryType = 2,
                            Name = "Horror"
                        },
                        new
                        {
                            Id = 4041,
                            CategoryType = 2,
                            Name = "Romance"
                        },
                        new
                        {
                            Id = 6489,
                            CategoryType = 2,
                            Name = "Animation"
                        },
                        new
                        {
                            Id = 8794,
                            CategoryType = 2,
                            Name = "Anime"
                        },
                        new
                        {
                            Id = 6190,
                            CategoryType = 2,
                            Name = "Mini-Series"
                        },
                        new
                        {
                            Id = 440,
                            CategoryType = 2,
                            Name = "Family"
                        },
                        new
                        {
                            Id = 1629,
                            CategoryType = 2,
                            Name = "Historical"
                        },
                        new
                        {
                            Id = 6944,
                            CategoryType = 2,
                            Name = "Children"
                        },
                        new
                        {
                            Id = 10,
                            CategoryType = 2,
                            Name = "Reality"
                        },
                        new
                        {
                            Id = 8203,
                            CategoryType = 2,
                            Name = "Mystery"
                        },
                        new
                        {
                            Id = 4637,
                            CategoryType = 2,
                            Name = "Documentary"
                        },
                        new
                        {
                            Id = 8680,
                            CategoryType = 2,
                            Name = "political"
                        },
                        new
                        {
                            Id = 2405,
                            CategoryType = 2,
                            Name = "Soap"
                        },
                        new
                        {
                            Id = 9127,
                            CategoryType = 2,
                            Name = "Sport"
                        },
                        new
                        {
                            Id = 1674,
                            CategoryType = 2,
                            Name = "Western"
                        },
                        new
                        {
                            Id = 8478,
                            CategoryType = 2,
                            Name = "saga"
                        },
                        new
                        {
                            Id = 5975,
                            CategoryType = 2,
                            Name = "Crime Thriller"
                        },
                        new
                        {
                            Id = 5001,
                            CategoryType = 2,
                            Name = "Disaster Thriller"
                        },
                        new
                        {
                            Id = 255,
                            CategoryType = 2,
                            Name = "Psychological Thriller"
                        },
                        new
                        {
                            Id = 3323,
                            CategoryType = 2,
                            Name = "Techno Thriller"
                        },
                        new
                        {
                            Id = 6263,
                            CategoryType = 0,
                            Name = "Science"
                        },
                        new
                        {
                            Id = 6754,
                            CategoryType = 0,
                            Name = "ACtion"
                        },
                        new
                        {
                            Id = 5899,
                            CategoryType = 0,
                            Name = "News"
                        });
                });

            modelBuilder.Entity("Streamia.Models.Channel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.HasKey("Id");

                    b.ToTable("Channels");
                });

            modelBuilder.Entity("Streamia.Models.Episode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Director")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<string>("Overview")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Rating")
                        .HasColumnType("real");

                    b.Property<string>("ReleaseDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Season")
                        .HasColumnType("int");

                    b.Property<int>("SeriesId")
                        .HasColumnType("int");

                    b.Property<string>("Source")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("SeriesId");

                    b.ToTable("Episode");
                });

            modelBuilder.Entity("Streamia.Models.IptvUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BouquetId")
                        .HasColumnType("int");

                    b.Property<long>("Connections")
                        .HasColumnType("bigint");

                    b.Property<long>("DaysToExpire")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("Expiration")
                        .HasColumnType("datetime2");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BouquetId");

                    b.ToTable("IptvUsers");
                });

            modelBuilder.Entity("Streamia.Models.Movie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Cast")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Director")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gener")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Overview")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PosterUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Rating")
                        .HasColumnType("real");

                    b.Property<string>("ReleaseDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Runtime")
                        .HasColumnType("int");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.Property<bool>("StreamDirectly")
                        .HasColumnType("bit");

                    b.Property<string>("StreamKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TranscodeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Uptime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("TranscodeId");

                    b.ToTable("Movies");
                });

            modelBuilder.Entity("Streamia.Models.MovieServer", b =>
                {
                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.Property<int>("ServerId")
                        .HasColumnType("int");

                    b.Property<int>("Pid")
                        .HasColumnType("int");

                    b.HasKey("MovieId", "ServerId");

                    b.HasIndex("ServerId");

                    b.ToTable("MovieServers");
                });

            modelBuilder.Entity("Streamia.Models.Series", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Cast")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Gener")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Overview")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PosterUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Rating")
                        .HasColumnType("real");

                    b.Property<string>("ReleaseDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.Property<bool>("StreamDirectly")
                        .HasColumnType("bit");

                    b.Property<string>("StreamKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TranscodeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Uptime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("TranscodeId");

                    b.ToTable("Serieses");
                });

            modelBuilder.Entity("Streamia.Models.SeriesServer", b =>
                {
                    b.Property<int>("SeriesId")
                        .HasColumnType("int");

                    b.Property<int>("ServerId")
                        .HasColumnType("int");

                    b.Property<int>("Pid")
                        .HasColumnType("int");

                    b.HasKey("SeriesId", "ServerId");

                    b.HasIndex("ServerId");

                    b.ToTable("SeriesServers");
                });

            modelBuilder.Entity("Streamia.Models.Server", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("HttpPort")
                        .HasColumnType("int");

                    b.Property<int>("HttpsPort")
                        .HasColumnType("int");

                    b.Property<string>("Ip")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsRTMP")
                        .HasColumnType("bit");

                    b.Property<int>("MaxClients")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RootPassword")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RtmpPort")
                        .HasColumnType("int");

                    b.Property<int>("ServerState")
                        .HasColumnType("int");

                    b.Property<int>("SshPort")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Servers");
                });

            modelBuilder.Entity("Streamia.Models.Setting", b =>
                {
                    b.Property<string>("AdminUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("SetAccountKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UnitPoint")
                        .HasColumnType("int");

                    b.Property<int>("UserValue")
                        .HasColumnType("int");

                    b.HasKey("AdminUserId");

                    b.ToTable("Settings");
                });

            modelBuilder.Entity("Streamia.Models.Stream", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("Delay")
                        .HasColumnType("int");

                    b.Property<bool>("EnableRecording")
                        .HasColumnType("bit");

                    b.Property<bool>("EnableRtmp")
                        .HasColumnType("bit");

                    b.Property<string>("EnigmaSID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("GeneratePts")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.Property<bool>("StreamDirectly")
                        .HasColumnType("bit");

                    b.Property<string>("StreamKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TranscodeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Uptime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("TranscodeId");

                    b.ToTable("Streams");
                });

            modelBuilder.Entity("Streamia.Models.StreamServer", b =>
                {
                    b.Property<int>("StreamId")
                        .HasColumnType("int");

                    b.Property<int>("ServerId")
                        .HasColumnType("int");

                    b.Property<int>("Pid")
                        .HasColumnType("int");

                    b.HasKey("StreamId", "ServerId");

                    b.HasIndex("ServerId");

                    b.ToTable("StreamServers");
                });

            modelBuilder.Entity("Streamia.Models.Transcode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AspectRatio")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AudioChannel")
                        .HasColumnType("int");

                    b.Property<string>("AudioCodec")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AudioSampleRate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AvgAudioBitrate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AvgBitrate")
                        .HasColumnType("int");

                    b.Property<string>("BufferSize")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CRF")
                        .HasColumnType("int");

                    b.Property<int>("Hardware")
                        .HasColumnType("int");

                    b.Property<int>("MaxBitrate")
                        .HasColumnType("int");

                    b.Property<int>("MinBitrate")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Preset")
                        .HasColumnType("int");

                    b.Property<string>("RemoveSenstitveParts")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Scaling")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TargetVideoFrameRate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Threads")
                        .HasColumnType("int");

                    b.Property<int>("Tune")
                        .HasColumnType("int");

                    b.Property<string>("VideoCodec")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Transcodes");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Streamia.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Streamia.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Streamia.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Streamia.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Streamia.Models.BouquetMovie", b =>
                {
                    b.HasOne("Streamia.Models.Bouquet", "Bouquet")
                        .WithMany("BouquetMovies")
                        .HasForeignKey("BouquetId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Streamia.Models.Movie", "Movie")
                        .WithMany("BouquetMovies")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Streamia.Models.BouquetSeries", b =>
                {
                    b.HasOne("Streamia.Models.Bouquet", "Bouquet")
                        .WithMany("BouquetSeries")
                        .HasForeignKey("BouquetId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Streamia.Models.Series", "Movie")
                        .WithMany("BouquetSeries")
                        .HasForeignKey("SeriesId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Streamia.Models.BouquetStream", b =>
                {
                    b.HasOne("Streamia.Models.Bouquet", "Bouquet")
                        .WithMany("BouquetStreams")
                        .HasForeignKey("BouquetId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Streamia.Models.Stream", "Stream")
                        .WithMany("BouquetStreams")
                        .HasForeignKey("StreamId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Streamia.Models.Episode", b =>
                {
                    b.HasOne("Streamia.Models.Series", "Series")
                        .WithMany("Episodes")
                        .HasForeignKey("SeriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Streamia.Models.IptvUser", b =>
                {
                    b.HasOne("Streamia.Models.Bouquet", "Bouquet")
                        .WithMany()
                        .HasForeignKey("BouquetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Streamia.Models.Movie", b =>
                {
                    b.HasOne("Streamia.Models.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Streamia.Models.Transcode", "Transcode")
                        .WithMany()
                        .HasForeignKey("TranscodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Streamia.Models.MovieServer", b =>
                {
                    b.HasOne("Streamia.Models.Movie", "Movie")
                        .WithMany("MovieServers")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Streamia.Models.Server", "Server")
                        .WithMany("MovieServers")
                        .HasForeignKey("ServerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Streamia.Models.Series", b =>
                {
                    b.HasOne("Streamia.Models.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Streamia.Models.Transcode", "Transcode")
                        .WithMany()
                        .HasForeignKey("TranscodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Streamia.Models.SeriesServer", b =>
                {
                    b.HasOne("Streamia.Models.Series", "Series")
                        .WithMany("SeriesServers")
                        .HasForeignKey("SeriesId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Streamia.Models.Server", "Server")
                        .WithMany("SeriesServers")
                        .HasForeignKey("ServerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Streamia.Models.Setting", b =>
                {
                    b.HasOne("Streamia.Models.AppUser", "AdminUser")
                        .WithOne("Setting")
                        .HasForeignKey("Streamia.Models.Setting", "AdminUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Streamia.Models.Stream", b =>
                {
                    b.HasOne("Streamia.Models.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Streamia.Models.Transcode", "Transcode")
                        .WithMany()
                        .HasForeignKey("TranscodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Streamia.Models.StreamServer", b =>
                {
                    b.HasOne("Streamia.Models.Server", "Server")
                        .WithMany("StreamServers")
                        .HasForeignKey("ServerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Streamia.Models.Stream", "Stream")
                        .WithMany("StreamServers")
                        .HasForeignKey("StreamId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
