// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Streamia.Models.Contexts;

namespace Streamia.Migrations
{
    [DbContext(typeof(StreamiaContext))]
    partial class StreamiaContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Streamia.Models.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ProfilePicture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SettingId")
                        .HasColumnType("int");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("SettingId");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Streamia.Models.Bouquet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Bouquets");
                });

            modelBuilder.Entity("Streamia.Models.BouquetChannel", b =>
                {
                    b.Property<int>("BouquetId")
                        .HasColumnType("int");

                    b.Property<int>("ChannelId")
                        .HasColumnType("int");

                    b.HasKey("BouquetId", "ChannelId");

                    b.HasIndex("ChannelId");

                    b.ToTable("BouquetChannel");
                });

            modelBuilder.Entity("Streamia.Models.BouquetMovie", b =>
                {
                    b.Property<int>("BouquetId")
                        .HasColumnType("int");

                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.HasKey("BouquetId", "MovieId");

                    b.HasIndex("MovieId");

                    b.ToTable("BouquetMovies");
                });

            modelBuilder.Entity("Streamia.Models.BouquetSeries", b =>
                {
                    b.Property<int>("BouquetId")
                        .HasColumnType("int");

                    b.Property<int>("SeriesId")
                        .HasColumnType("int");

                    b.HasKey("BouquetId", "SeriesId");

                    b.HasIndex("SeriesId");

                    b.ToTable("BouquetSeries");
                });

            modelBuilder.Entity("Streamia.Models.BouquetStream", b =>
                {
                    b.Property<int>("BouquetId")
                        .HasColumnType("int");

                    b.Property<int>("StreamId")
                        .HasColumnType("int");

                    b.HasKey("BouquetId", "StreamId");

                    b.HasIndex("StreamId");

                    b.ToTable("BouquetStreams");
                });

            modelBuilder.Entity("Streamia.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategoryType")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryType = 0,
                            Name = "Science"
                        },
                        new
                        {
                            Id = 2,
                            CategoryType = 0,
                            Name = "Action"
                        },
                        new
                        {
                            Id = 3,
                            CategoryType = 0,
                            Name = "News"
                        },
                        new
                        {
                            Id = 4,
                            CategoryType = 1,
                            Name = "Action"
                        },
                        new
                        {
                            Id = 5,
                            CategoryType = 1,
                            Name = "Adventure"
                        },
                        new
                        {
                            Id = 6,
                            CategoryType = 1,
                            Name = "Comedy"
                        },
                        new
                        {
                            Id = 7,
                            CategoryType = 1,
                            Name = "Crime"
                        },
                        new
                        {
                            Id = 8,
                            CategoryType = 1,
                            Name = "Drama"
                        },
                        new
                        {
                            Id = 9,
                            CategoryType = 1,
                            Name = "Fantasy"
                        },
                        new
                        {
                            Id = 10,
                            CategoryType = 1,
                            Name = "Historical"
                        },
                        new
                        {
                            Id = 11,
                            CategoryType = 1,
                            Name = "Horror"
                        },
                        new
                        {
                            Id = 12,
                            CategoryType = 1,
                            Name = "Mystery"
                        },
                        new
                        {
                            Id = 13,
                            CategoryType = 1,
                            Name = "Philosophical"
                        },
                        new
                        {
                            Id = 14,
                            CategoryType = 1,
                            Name = "Political"
                        },
                        new
                        {
                            Id = 15,
                            CategoryType = 1,
                            Name = "Saga"
                        },
                        new
                        {
                            Id = 16,
                            CategoryType = 1,
                            Name = "Thriller"
                        },
                        new
                        {
                            Id = 17,
                            CategoryType = 1,
                            Name = "Western"
                        },
                        new
                        {
                            Id = 18,
                            CategoryType = 1,
                            Name = "Crime Thriller"
                        },
                        new
                        {
                            Id = 19,
                            CategoryType = 1,
                            Name = "Disaster Thriller"
                        },
                        new
                        {
                            Id = 20,
                            CategoryType = 1,
                            Name = "Psychological Thriller"
                        },
                        new
                        {
                            Id = 21,
                            CategoryType = 1,
                            Name = "Techno Thriller"
                        },
                        new
                        {
                            Id = 22,
                            CategoryType = 1,
                            Name = "Science Fiction"
                        },
                        new
                        {
                            Id = 23,
                            CategoryType = 1,
                            Name = "Suspense"
                        },
                        new
                        {
                            Id = 24,
                            CategoryType = 1,
                            Name = "Animation"
                        },
                        new
                        {
                            Id = 25,
                            CategoryType = 2,
                            Name = "Action"
                        },
                        new
                        {
                            Id = 26,
                            CategoryType = 2,
                            Name = "Adventure"
                        },
                        new
                        {
                            Id = 27,
                            CategoryType = 2,
                            Name = "Comedy"
                        },
                        new
                        {
                            Id = 28,
                            CategoryType = 2,
                            Name = "Crime"
                        },
                        new
                        {
                            Id = 29,
                            CategoryType = 2,
                            Name = "Drama"
                        },
                        new
                        {
                            Id = 30,
                            CategoryType = 2,
                            Name = "Fantasy"
                        },
                        new
                        {
                            Id = 31,
                            CategoryType = 2,
                            Name = "Historical"
                        },
                        new
                        {
                            Id = 32,
                            CategoryType = 2,
                            Name = "Horror"
                        },
                        new
                        {
                            Id = 33,
                            CategoryType = 2,
                            Name = "Mystery"
                        },
                        new
                        {
                            Id = 34,
                            CategoryType = 2,
                            Name = "Philosophical"
                        },
                        new
                        {
                            Id = 35,
                            CategoryType = 2,
                            Name = "Political"
                        },
                        new
                        {
                            Id = 36,
                            CategoryType = 2,
                            Name = "Saga"
                        },
                        new
                        {
                            Id = 37,
                            CategoryType = 2,
                            Name = "Thriller"
                        },
                        new
                        {
                            Id = 38,
                            CategoryType = 2,
                            Name = "Western"
                        },
                        new
                        {
                            Id = 39,
                            CategoryType = 2,
                            Name = "Crime Thriller"
                        },
                        new
                        {
                            Id = 40,
                            CategoryType = 2,
                            Name = "Disaster Thriller"
                        },
                        new
                        {
                            Id = 41,
                            CategoryType = 2,
                            Name = "Psychological Thriller"
                        },
                        new
                        {
                            Id = 42,
                            CategoryType = 2,
                            Name = "Techno Thriller"
                        },
                        new
                        {
                            Id = 43,
                            CategoryType = 2,
                            Name = "Science Fiction"
                        },
                        new
                        {
                            Id = 44,
                            CategoryType = 2,
                            Name = "Suspense"
                        },
                        new
                        {
                            Id = 45,
                            CategoryType = 2,
                            Name = "Animation"
                        },
                        new
                        {
                            Id = 46,
                            CategoryType = 2,
                            Name = "Documentary"
                        },
                        new
                        {
                            Id = 47,
                            CategoryType = 2,
                            Name = "Family"
                        },
                        new
                        {
                            Id = 48,
                            CategoryType = 2,
                            Name = "Children"
                        },
                        new
                        {
                            Id = 49,
                            CategoryType = 2,
                            Name = "Sport"
                        });
                });

            modelBuilder.Entity("Streamia.Models.Channel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Channels");
                });

            modelBuilder.Entity("Streamia.Models.ChannelServer", b =>
                {
                    b.Property<int>("ChannelId")
                        .HasColumnType("int");

                    b.Property<int>("ServerId")
                        .HasColumnType("int");

                    b.Property<int>("Pid")
                        .HasColumnType("int");

                    b.HasKey("ChannelId", "ServerId");

                    b.HasIndex("ServerId");

                    b.ToTable("ChannelServer");
                });

            modelBuilder.Entity("Streamia.Models.Episode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Director")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<string>("Overview")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Rating")
                        .HasColumnType("real");

                    b.Property<string>("ReleaseDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Season")
                        .HasColumnType("int");

                    b.Property<int>("SeriesId")
                        .HasColumnType("int");

                    b.Property<string>("Source")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("SeriesId");

                    b.ToTable("Episode");
                });

            modelBuilder.Entity("Streamia.Models.IptvUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BouquetId")
                        .HasColumnType("int");

                    b.Property<long>("Connections")
                        .HasColumnType("bigint");

                    b.Property<long>("DaysToExpire")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("Expiration")
                        .HasColumnType("datetime2");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BouquetId");

                    b.ToTable("IptvUsers");
                });

            modelBuilder.Entity("Streamia.Models.Movie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Cast")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Director")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gener")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Overview")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PosterUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Rating")
                        .HasColumnType("real");

                    b.Property<string>("ReleaseDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Runtime")
                        .HasColumnType("int");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.Property<bool>("StreamDirectly")
                        .HasColumnType("bit");

                    b.Property<string>("StreamKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TranscodeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Uptime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("TranscodeId");

                    b.ToTable("Movies");
                });

            modelBuilder.Entity("Streamia.Models.MovieServer", b =>
                {
                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.Property<int>("ServerId")
                        .HasColumnType("int");

                    b.Property<int>("Pid")
                        .HasColumnType("int");

                    b.HasKey("MovieId", "ServerId");

                    b.HasIndex("ServerId");

                    b.ToTable("MovieServers");
                });

            modelBuilder.Entity("Streamia.Models.Series", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Cast")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Gener")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Overview")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PosterUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Rating")
                        .HasColumnType("real");

                    b.Property<string>("ReleaseDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.Property<bool>("StreamDirectly")
                        .HasColumnType("bit");

                    b.Property<string>("StreamKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TranscodeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Uptime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("TranscodeId");

                    b.ToTable("Serieses");
                });

            modelBuilder.Entity("Streamia.Models.SeriesServer", b =>
                {
                    b.Property<int>("SeriesId")
                        .HasColumnType("int");

                    b.Property<int>("ServerId")
                        .HasColumnType("int");

                    b.Property<int>("Pid")
                        .HasColumnType("int");

                    b.HasKey("SeriesId", "ServerId");

                    b.HasIndex("ServerId");

                    b.ToTable("SeriesServers");
                });

            modelBuilder.Entity("Streamia.Models.Server", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("HttpPort")
                        .HasColumnType("int");

                    b.Property<int>("HttpsPort")
                        .HasColumnType("int");

                    b.Property<string>("Ip")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MaxClients")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RootPassword")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RtmpPort")
                        .HasColumnType("int");

                    b.Property<int>("ServerState")
                        .HasColumnType("int");

                    b.Property<int>("SshPort")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Servers");
                });

            modelBuilder.Entity("Streamia.Models.Setting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Credit")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Settings");
                });

            modelBuilder.Entity("Streamia.Models.Stream", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("Delay")
                        .HasColumnType("int");

                    b.Property<bool>("EnableRecording")
                        .HasColumnType("bit");

                    b.Property<bool>("EnableRtmp")
                        .HasColumnType("bit");

                    b.Property<string>("EnigmaSID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("GeneratePts")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.Property<bool>("StreamDirectly")
                        .HasColumnType("bit");

                    b.Property<string>("StreamKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TranscodeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Uptime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("TranscodeId");

                    b.ToTable("Streams");
                });

            modelBuilder.Entity("Streamia.Models.StreamServer", b =>
                {
                    b.Property<int>("StreamId")
                        .HasColumnType("int");

                    b.Property<int>("ServerId")
                        .HasColumnType("int");

                    b.Property<int>("Pid")
                        .HasColumnType("int");

                    b.HasKey("StreamId", "ServerId");

                    b.HasIndex("ServerId");

                    b.ToTable("StreamServers");
                });

            modelBuilder.Entity("Streamia.Models.Transcode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AspectRatio")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AudioChannel")
                        .HasColumnType("int");

                    b.Property<string>("AudioCodec")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AudioSampleRate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AvgAudioBitrate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AvgBitrate")
                        .HasColumnType("int");

                    b.Property<string>("BufferSize")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CRF")
                        .HasColumnType("int");

                    b.Property<int>("Hardware")
                        .HasColumnType("int");

                    b.Property<int>("MaxBitrate")
                        .HasColumnType("int");

                    b.Property<int>("MinBitrate")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Preset")
                        .HasColumnType("int");

                    b.Property<int>("Probsize")
                        .HasColumnType("int");

                    b.Property<string>("RemoveSensitiveParts")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Scaling")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TargetVideoFrameRate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Threads")
                        .HasColumnType("int");

                    b.Property<int>("Tune")
                        .HasColumnType("int");

                    b.Property<string>("VideoCodec")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Transcodes");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Streamia.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Streamia.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Streamia.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Streamia.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Streamia.Models.AppUser", b =>
                {
                    b.HasOne("Streamia.Models.Setting", "Setting")
                        .WithMany()
                        .HasForeignKey("SettingId");
                });

            modelBuilder.Entity("Streamia.Models.BouquetChannel", b =>
                {
                    b.HasOne("Streamia.Models.Bouquet", "Bouquet")
                        .WithMany("BouquetChannels")
                        .HasForeignKey("BouquetId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Streamia.Models.Channel", "Channel")
                        .WithMany("BouquetChannels")
                        .HasForeignKey("ChannelId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Streamia.Models.BouquetMovie", b =>
                {
                    b.HasOne("Streamia.Models.Bouquet", "Bouquet")
                        .WithMany("BouquetMovies")
                        .HasForeignKey("BouquetId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Streamia.Models.Movie", "Movie")
                        .WithMany("BouquetMovies")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Streamia.Models.BouquetSeries", b =>
                {
                    b.HasOne("Streamia.Models.Bouquet", "Bouquet")
                        .WithMany("BouquetSeries")
                        .HasForeignKey("BouquetId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Streamia.Models.Series", "Movie")
                        .WithMany("BouquetSeries")
                        .HasForeignKey("SeriesId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Streamia.Models.BouquetStream", b =>
                {
                    b.HasOne("Streamia.Models.Bouquet", "Bouquet")
                        .WithMany("BouquetStreams")
                        .HasForeignKey("BouquetId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Streamia.Models.Stream", "Stream")
                        .WithMany("BouquetStreams")
                        .HasForeignKey("StreamId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Streamia.Models.ChannelServer", b =>
                {
                    b.HasOne("Streamia.Models.Channel", "Channel")
                        .WithMany("ChannelServers")
                        .HasForeignKey("ChannelId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Streamia.Models.Server", "Server")
                        .WithMany("ChannelServers")
                        .HasForeignKey("ServerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Streamia.Models.Episode", b =>
                {
                    b.HasOne("Streamia.Models.Series", "Series")
                        .WithMany("Episodes")
                        .HasForeignKey("SeriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Streamia.Models.IptvUser", b =>
                {
                    b.HasOne("Streamia.Models.Bouquet", "Bouquet")
                        .WithMany()
                        .HasForeignKey("BouquetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Streamia.Models.Movie", b =>
                {
                    b.HasOne("Streamia.Models.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Streamia.Models.Transcode", "Transcode")
                        .WithMany()
                        .HasForeignKey("TranscodeId");
                });

            modelBuilder.Entity("Streamia.Models.MovieServer", b =>
                {
                    b.HasOne("Streamia.Models.Movie", "Movie")
                        .WithMany("MovieServers")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Streamia.Models.Server", "Server")
                        .WithMany("MovieServers")
                        .HasForeignKey("ServerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Streamia.Models.Series", b =>
                {
                    b.HasOne("Streamia.Models.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Streamia.Models.Transcode", "Transcode")
                        .WithMany()
                        .HasForeignKey("TranscodeId");
                });

            modelBuilder.Entity("Streamia.Models.SeriesServer", b =>
                {
                    b.HasOne("Streamia.Models.Series", "Series")
                        .WithMany("SeriesServers")
                        .HasForeignKey("SeriesId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Streamia.Models.Server", "Server")
                        .WithMany("SeriesServers")
                        .HasForeignKey("ServerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Streamia.Models.Stream", b =>
                {
                    b.HasOne("Streamia.Models.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Streamia.Models.Transcode", "Transcode")
                        .WithMany()
                        .HasForeignKey("TranscodeId");
                });

            modelBuilder.Entity("Streamia.Models.StreamServer", b =>
                {
                    b.HasOne("Streamia.Models.Server", "Server")
                        .WithMany("StreamServers")
                        .HasForeignKey("ServerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Streamia.Models.Stream", "Stream")
                        .WithMany("StreamServers")
                        .HasForeignKey("StreamId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
