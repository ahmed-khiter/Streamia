@model Series
@{
    ViewData["Title"] = "Add Series";
    ViewData["Icon"] = "plus";
}

@section Styles {
    <link href="~/lib/select2/css/select2.min.css" rel="stylesheet" />
    <link href="~/ttskch/select2-bootstrap4-theme/dist/select2-bootstrap4.min.css" rel="stylesheet" />
    <link href="~/lib/switchery/switchery.css" rel="stylesheet" />
}

<form method="post" id="series-form">
    <h4>Series Main Info</h4>
    <div class="row">
        <div class="form-group col-md-3">
            <label asp-for="Name"></label>
            <div class="api-search-container">
                <input asp-for="Name" id="series-name" class="form-control" autocomplete="off" />
                <div class="api-search-dropdown"></div>
            </div>
            <span class="text-danger" asp-validation-for="Name"></span>
        </div>
        <div class="form-group col-md-3">
            <label asp-for="CategoryId"></label>
            <select asp-for="CategoryId" asp-items="@(new SelectList(ViewBag.Categories,"Id","Name"))" class="form-control">
            </select>
            <span class="text-danger" asp-validation-for="CategoryId"></span>
        </div>
        <div class="form-group col-md-3">
            <label asp-for="PosterUrl"></label>
            <input asp-for="PosterUrl" class="form-control" />
            <span class="text-danger" asp-validation-for="PosterUrl"></span>
        </div>
        <div class="form-group col-md-3">
            <label asp-for="Overview"></label>
            <input asp-for="Overview" class="form-control" />
            <span class="text-danger" asp-validation-for="Overview"></span>
        </div>
        <div class="form-group col-md-3">
            <label asp-for="Cast"></label>
            <input asp-for="Cast" class="form-control" />
            <span class="text-danger" asp-validation-for="Cast"></span>
        </div>
        <div class="form-group col-md-3">
            <label asp-for="Director"></label>
            <input asp-for="Director" class="form-control" />
            <span class="text-danger" asp-validation-for="Director"></span>
        </div>
        <div class="form-group col-md-3">
            <label asp-for="Gener"></label>
            <input asp-for="Gener" class="form-control" />
            <span class="text-danger" asp-validation-for="Gener"></span>
        </div>
        <div class="form-group col-md-3">
            <label asp-for="ReleaseDate"></label>
            <input asp-for="ReleaseDate" class="form-control" />
            <span class="text-danger" asp-validation-for="ReleaseDate"></span>
        </div>
        <div class="form-group col-md-3">
            <label asp-for="Rating"></label>
            <input asp-for="Rating" class="form-control" />
            <span class="text-danger" asp-validation-for="Rating"></span>
        </div>
        <div class="form-group col-md-3">
            <label asp-for="BouquetIds"></label>
            <select asp-for="BouquetIds" asp-items="@(new SelectList(ViewBag.Bouquets,"Id","Name"))" class="form-control" multiple></select>
            <span class="text-danger" asp-validation-for="BouquetIds"></span>
        </div>
    </div>
    <div id="seasons-area">
    </div>
    <hr />
    <button class="btn btn-success">
        <i class="fa fa-plus"></i> Add
    </button>
</form>

@section Scripts
{
    <script src="~/lib/signalr/dist/browser/signalr.min.js"></script>
    <script src="~/lib/select2/js/select2.full.min.js"></script>
    <script src="~/lib/switchery/switchery.js"></script>
    <script src="~/js/Exploreia.js" asp-append-version="true"></script>
    <script>
        const exploreia = new Exploreia();
        exploreia.render(@Html.Raw(Json.Serialize(ViewBag.Servers)));

        var connection = new signalR.HubConnectionBuilder().withUrl("/directory-browser-hub").build();
        connection.start();

        connection.on('DirectoryList', function (data) {
            exploreia.renderDirectories(data.directoryList);
        });

        exploreia.onServerChange(function (value) {
            connection.invoke('ListServerDirectory', value, exploreia.createPath());
        });

        window.addEventListener('load', function () {

            //$('select').select2({
            //    theme: 'bootstrap4'
            //});

            var elems = Array.prototype.slice.call(document.querySelectorAll('.js-switch'));

            elems.forEach(function (html) {
                new Switchery(html);
            });

            var timeout = null;
            var inputVal = null;
            const API_KEY = '415e9238d5188172426c3858b367e468';

            $('#series-name').on('keyup', function () {
                $('.api-search-dropdown').html('<div class="api-search-result">Searching...</div>').show();

                inputVal = $(this).val();

                if (timeout === null) {
                    timeout = setTimeout(function () {
                        TMDBSearch('tv', inputVal, API_KEY, function (response) {
                            $('.api-search-dropdown').html('');
                            response.results.forEach(v => {
                                $('.api-search-dropdown').append(`
                                            <div class="api-search-result" data-id="${v.id}">
                                                ${v.name} (${v.first_air_date ? v.first_air_date.split('-')[0] : ''})
                                            </div>
                                        `);
                            });
                        });
                        timeout = null;
                    }, 500);
                }

            });

            $('body').on('click', '.api-search-result', function () {
                $('.api-search-dropdown').hide();
                var id = $(this).data('id');
                TMDB('tv', id, API_KEY, 'season,credits', function (response) {
                    let genres = [];
                    let cast = [];
                    let director = null;
                    response.genres.forEach(v => {
                        genres.push(v.name);
                    });
                    response.credits.cast.forEach(v => {
                        cast.push(v.name);
                    });
                    for (let v of response.credits.crew) {
                        if (v.department === "Directing") {
                            director = v.name;
                            break;
                        }
                    }
                    $('#hidden-inputs-area').html('');
                    response.seasons.forEach(v => {
                        let seasonNumber = v.season_number;
                        if (seasonNumber > 0) {
                            $('#seasons-area').append(`
                                        <div class="card">
                                            <div class="card-header">
                                                <h5 class="mb-0">
                                                    <button class="btn btn-link" type="button" data-toggle="collapse" data-target="#season-${seasonNumber}">
                                                        Season ${seasonNumber}
                                                    </button>
                                                </h5>
                                            </div>
                                            <div id="season-${seasonNumber}" class="collapse" data-parent="#seasons-area">
                                                <div class="card-body">
                                                    <button type="button" class="main-btn browse">
                                                        <i class="fa fa-folder-open"></i> Browse Season ${seasonNumber} Episodes
                                                    </button>
                                    `);
                            for (let i = 0; i < v.episode_count; i++) {
                                let episodeNumber = i + 1;
                                $('#seasons-area').append(`
                                            <div id="${seasonNumber}_${episodeNumber}">
                                                <input name="Episode.Season" value="${seasonNumber}" type="hidden" />
                                                <input name="Episode.Number" value="${episodeNumber}" type="hidden" />
                                                <input name="Episode.Source" type="hidden" />
                                                <input name="Episode.Name" type="hidden" />
                                                <input name="Episode.PosterUrl" type="hidden" />
                                                <input name="Episode.Overview" type="hidden" />
                                                <input name="Episode.Cast" type="hidden" />
                                                <input name="Episode.Director" type="hidden" />
                                                <input name="Episode.Gener" type="hidden" />
                                                <input name="Episode.ReleaseDate" type="hidden" />
                                                <input name="Episode.Runtime" type="hidden" />
                                                <input name="Episode.Rating" type="hidden" />
                                            </div>
                                        `);
                            }
                            $('#seasons-area').append('</div></div></div>');
                        }
                    });
                    $('#series-name').val(response.name);
                    $('#PosterUrl').val(`https://image.tmdb.org/t/p/w600_and_h900_bestv2${response.poster_path}`);
                    $('#Overview').val(response.overview);
                    $('#Rating').val(response.vote_average);
                    $('#Gener').val(genres.join(','));
                    $('#Cast').val(cast.join(','));
                    $('#ReleaseDate').val(response.first_air_date);
                    $('#Director').val(director);
                });
            });

            function TMDB(type, id, apiKey, appendToResponse, callback) {
                $.ajax({
                    type: 'GET',
                    url: `https://api.themoviedb.org/3/${type}/${id}?api_key=${apiKey}&language=en-US${appendToResponse != null ? '&append_to_response=' + appendToResponse : ''}`,
                    success: function (response) {
                        callback(response);
                    }
                });
            }

            function TMDBSearch(type, keyword, apiKey, callback) {
                $.ajax({
                    type: 'GET',
                    url: `https://api.themoviedb.org/3/search/${type}?api_key=${apiKey}&query=${keyword}`,
                    success: function (response) {
                        callback(response);
                    }
                });
            }

            $('body').on('click', '.server-directory', function () {
                $('.loader').show();
                $('.directory-browser-back-btn').hide();
                pathStack.push($(this).attr('data-path'));
                if (pathStack[pathStack.length - 1].split('.').length < 2) {
                    connection.invoke('ListServerDirectory', parseInt($('#directory-browser-server').val()), createPath(pathStack));
                } else {
                    let currentServer = $('#directory-browser-server').val();
                    $('#Source').val(`${currentServer + createPath(pathStack)}`);
                    resetBrowser();
                }
            });
            $('.directory-browser-back-btn').on('click', function () {
                $('.loader').show();
                $(this).hide();
                pathStack.pop();
                connection.invoke('ListServerDirectory', parseInt($('#directory-browser-server').val()), createPath(pathStack));
            });
            window.onbeforeunload = function () {
                connection.invoke('DisposeConnection', parseInt($('#directory-browser-server').val()));
            };

        });
    </script>
}